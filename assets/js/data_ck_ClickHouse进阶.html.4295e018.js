"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[7753],{6262:(i,e)=>{e.A=(i,e)=>{const s=i.__vccOpts||i;for(const[i,a]of e)s[i]=a;return s}},1610:(i,e,s)=>{s.r(e),s.d(e,{comp:()=>t,data:()=>n});var a=s(641);const l={},t=(0,s(6262).A)(l,[["render",function(i,e){const s=(0,a.g2)("font");return(0,a.uX)(),(0,a.CE)("div",null,[(0,a.Q3)(" more "),e[2]||(e[2]=(0,a.Fv)('<h2 id="_1-explain查看执行计划" tabindex="-1"><a class="header-anchor" href="#_1-explain查看执行计划"><span>1. EXPLAIN查看执行计划</span></a></h2><h3 id="_1-1-基本语法" tabindex="-1"><a class="header-anchor" href="#_1-1-基本语法"><span>1.1 基本语法</span></a></h3><p>EXPLAIN 用于查看查询的执行计划，帮助用户理解查询是如何被优化和执行的。这对性能调优非常有帮助。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">EXPLAIN </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[SYNTAX | PLAN | PIPELINE]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>参数说明</strong></p><ul><li>SYNTAX: 显示查询语法的解析结果，帮助验证查询是否被正确解析。</li><li>PLAN: 显示查询的逻辑执行计划，包含数据处理步骤和优化器如何安排这些步骤。</li><li>PIPELINE: 显示查询的物理执行计划，包含执行管道的细节，适合排查性能问题。</li></ul><h2 id="_2-建表优化" tabindex="-1"><a class="header-anchor" href="#_2-建表优化"><span>2. 建表优化</span></a></h2><h3 id="_2-1-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-1-数据类型"><span>2.1 数据类型</span></a></h3><h4 id="_2-1-1-时间字段的类型" tabindex="-1"><a class="header-anchor" href="#_2-1-1-时间字段的类型"><span>2.1.1 时间字段的类型</span></a></h4><p>建表时能用数值型或者日期时间型表示的字段就不要用字符串，全String类型在以Hive为中心的数仓建设中很常见，但是ClickHouse环境不应受此影响。</p>',10)),(0,a.Lk)("p",null,[e[1]||(e[1]=(0,a.eW)("虽然ClickHouse底层将DateTime存储为时间戳Long类型，但是不建议存储Long类型，")),(0,a.bF)(s,{color:"red"},{default:(0,a.k6)((()=>e[0]||(e[0]=[(0,a.eW)("因为DateTime不需要经过函数转化处理，执行效率高、可读性好。")]))),_:1})]),e[3]||(e[3]=(0,a.Fv)('<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"># 推荐设计</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    id UInt32,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> String,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    created_at </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DateTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> UInt8</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ENGINE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MergeTree()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PARTITION</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> toYYYYMM(created_at)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (id, created_at);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-空值存储类型" tabindex="-1"><a class="header-anchor" href="#_2-1-2-空值存储类型"><span>2.1.2 空值存储类型</span></a></h4><p>官方已经指出Nullable类型总会拖累性能，因为存储Nullable列无法被索引。因此除非特殊情况，应该直接使用字段默认值表示空，或者自行指定一个业务上无意义的值(例如用-1表示没有商品ID)。</p><div class="hint-container tip"><p class="hint-container-title">Nullable 类型的性能问题</p><ul><li>存储开销 <ul><li>Nullable 类型的额外成本： <ul><li>每个 Nullable 列都会额外存储一个位图（Null Bitmap），用于标识每一行是否为空值。这增加了存储空间的占用和 I/O 成本。</li></ul></li><li>在查询时，ClickHouse 需要检查该位图是否存在有效值，额外的步骤会拖慢查询速度。</li></ul></li><li>无法被索引 <ul><li>Nullable 列不能直接用于索引或主键的定义。这会限制查询性能的优化，尤其是在需要依赖索引加速查询的场景中。</li></ul></li><li>函数处理成本 <ul><li>在查询中对 Nullable 列的操作（如比较或聚合）会导致 ClickHouse 额外处理 null 值逻辑。例如：</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> AVG</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(column) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> example </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></div><h3 id="_2-2-分区和索引" tabindex="-1"><a class="header-anchor" href="#_2-2-分区和索引"><span>2.2 分区和索引</span></a></h3><h3 id="_2-3-表参数" tabindex="-1"><a class="header-anchor" href="#_2-3-表参数"><span>2.3 表参数</span></a></h3><h3 id="_2-4-写入和删除优化" tabindex="-1"><a class="header-anchor" href="#_2-4-写入和删除优化"><span>2.4 写入和删除优化</span></a></h3><h2 id="_3-clickhouse语法优化规则" tabindex="-1"><a class="header-anchor" href="#_3-clickhouse语法优化规则"><span>3. ClickHouse语法优化规则</span></a></h2><h2 id="_4" tabindex="-1"><a class="header-anchor" href="#_4"><span>4.</span></a></h2>',9))])}]]),n=JSON.parse('{"path":"/data/ck/ClickHouse%E8%BF%9B%E9%98%B6.html","title":"ClickHouse进阶","lang":"zh-CN","frontmatter":{"title":"ClickHouse进阶","cover":"/assets/images/cover1.jpg","icon":"file","order":2,"author":"CodeLong","date":"2024-10-23T00:00:00.000Z","category":["Data","ClickHouse"],"tag":["基础","使用指南"],"sticky":true,"star":true,"footer":"这是测试显示的页脚","copyright":"无版权","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/data/ck/ClickHouse%E8%BF%9B%E9%98%B6.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"ClickHouse进阶"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/assets/images/cover1.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-21T14:48:24.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://mister-hope.github.io/blog/assets/images/cover1.jpg"}],["meta",{"name":"twitter:image:alt","content":"ClickHouse进阶"}],["meta",{"property":"article:author","content":"CodeLong"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:tag","content":"使用指南"}],["meta",{"property":"article:published_time","content":"2024-10-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-21T14:48:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ClickHouse进阶\\",\\"image\\":[\\"https://mister-hope.github.io/blog/assets/images/cover1.jpg\\"],\\"datePublished\\":\\"2024-10-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-21T14:48:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"CodeLong\\"}]}"]]},"headers":[{"level":2,"title":"1. EXPLAIN查看执行计划","slug":"_1-explain查看执行计划","link":"#_1-explain查看执行计划","children":[{"level":3,"title":"1.1 基本语法","slug":"_1-1-基本语法","link":"#_1-1-基本语法","children":[]}]},{"level":2,"title":"2. 建表优化","slug":"_2-建表优化","link":"#_2-建表优化","children":[{"level":3,"title":"2.1 数据类型","slug":"_2-1-数据类型","link":"#_2-1-数据类型","children":[]},{"level":3,"title":"2.2 分区和索引","slug":"_2-2-分区和索引","link":"#_2-2-分区和索引","children":[]},{"level":3,"title":"2.3 表参数","slug":"_2-3-表参数","link":"#_2-3-表参数","children":[]},{"level":3,"title":"2.4 写入和删除优化","slug":"_2-4-写入和删除优化","link":"#_2-4-写入和删除优化","children":[]}]},{"level":2,"title":"3. ClickHouse语法优化规则","slug":"_3-clickhouse语法优化规则","link":"#_3-clickhouse语法优化规则","children":[]},{"level":2,"title":"4.","slug":"_4","link":"#_4","children":[]}],"git":{"createdTime":1729785583000,"updatedTime":1732200504000,"contributors":[{"name":"bigshcool","email":"990194923@qq.com","commits":3}]},"readingTime":{"minutes":2.52,"words":756},"filePathRelative":"data/ck/ClickHouse进阶.md","localizedDate":"2024年10月23日","excerpt":""}')}}]);